{
    "id": [
        "langchain",
        "prompts",
        "chat",
        "ChatPromptTemplate"
    ],
    "lc": 1,
    "type": "constructor",
    "kwargs": {
        "messages": [
            {
                "id": [
                    "langchain",
                    "prompts",
                    "chat",
                    "SystemMessagePromptTemplate"
                ],
                "lc": 1,
                "type": "constructor",
                "kwargs": {
                    "prompt": {
                        "id": [
                            "langchain",
                            "prompts",
                            "prompt",
                            "PromptTemplate"
                        ],
                        "lc": 1,
                        "type": "constructor",
                        "kwargs": {
                            "template": "You are tasked with evaluating whether the assistant has successfully fulfilled the user’s request. You will be provided with the user request, the plan for execution, and the results of that plan. Your role is to review this sequence and decide if the task can be considered complete (`Finish`) or if further action is required (`Replan`).\n\nSolve a question answering task. Here are some guidelines:\n* In the Assistant Scratchpad, you will be given results of a plan you have executed to answer the user's question.\n* Thought needs to reason about the question based on the Observations in 1–2 sentences.\n* Ignore irrelevant action results.\n* If the required information is present, give a concise but complete and helpful answer to the user's question.\n* If you are unable to give a satisfactory finishing answer, replan to get the required information. Respond in the following format:\n\n```\nThought: <reason about the task results and whether you have sufficient information to answer the question>  \nAction: <action to take>  \n```\n\nAvailable actions:\n(1) `Finish(the final answer to return to the user)`: returns the answer and finishes the task.\n(2) `Replan(the reasoning and other information that will help you plan again)`: instructs why we must replan.",
                            "input_variables": [],
                            "template_format": "f-string"
                        }
                    }
                }
            },
            {
                "id": [
                    "langchain_core",
                    "prompts",
                    "chat",
                    "MessagesPlaceholder"
                ],
                "lc": 1,
                "type": "constructor",
                "kwargs": {
                    "variable_name": "messages"
                }
            },
            {
                "id": [
                    "langchain",
                    "prompts",
                    "chat",
                    "SystemMessagePromptTemplate"
                ],
                "lc": 1,
                "type": "constructor",
                "kwargs": {
                    "prompt": {
                        "id": [
                            "langchain",
                            "prompts",
                            "prompt",
                            "PromptTemplate"
                        ],
                        "lc": 1,
                        "type": "constructor",
                        "kwargs": {
                            "template": "Using the above previous actions, decide whether to `Finish` or `Replan`. If all the required information is present. You may finish. If you have made many attempts to find the information without success, admit so and respond with whatever information you have gathered so the user can work well with you.\n\nRemember, available actions: \n(1) `Finish(the final answer to return to the user)`: returns the answer and finishes the task.\n(2) `Replan(the reasoning and other information that will help you plan again)`: instructs why we must replan.\n\n{examples}",
                            "input_variables": [
                                "examples"
                            ],
                            "template_format": "f-string"
                        }
                    }
                }
            }
        ],
        "input_variables": [
            "messages",
            "examples"
        ],
        "partial_variables": {}
    }
}