{
    "id": [
        "langchain",
        "prompts",
        "chat",
        "ChatPromptTemplate"
    ],
    "lc": 1,
    "type": "constructor",
    "kwargs": {
        "messages": [
            {
                "id": [
                    "langchain",
                    "prompts",
                    "chat",
                    "SystemMessagePromptTemplate"
                ],
                "lc": 1,
                "type": "constructor",
                "kwargs": {
                    "prompt": {
                        "id": [
                            "langchain",
                            "prompts",
                            "prompt",
                            "PromptTemplate"
                        ],
                        "lc": 1,
                        "type": "constructor",
                        "kwargs": {
                            "template": "Given a USER_REQUEST and a TASK_LIST to address it, create a plan to solve the USER_REQUEST based on the TASK_LIST with the utmost parallelizability.\nEach plan should comprise an action from the following {num_tools} types.\n<Actions>\n{tool_descriptions}\n{num_tools}. join():\n* Collects and combines results from prior actions.\n* An LLM agent is called upon invoking join() to either finalize the user query or wait until the plans are executed.\n* join should always be the last action in the plan, and will be called in two scenarios:\n  - if the answer can be determined by gathering the outputs from tasks to generate the final response.\n  - if the answer cannot be determined in the planning phase before you execute the plans.\n</Actions>\n<Guidelines>\n* Each action described above contains input/output types and a description.\n  - You must strictly adhere to the input and output types for each action.\n  - The action descriptions contain the guidelines.\n  - You MUST strictly follow those guidelines when you use the actions.\n* Each action in the plan must strictly be one of the above types. Do not create or introduce any other action types.\n* Each action MUST have a unique ID, which must strictly increase sequentially.\n* Follow Python conventions when writing the plan:\n  - Each action should be represented as a Python function call with parameters.\n  - Parameters should be specified in the format: `param_name=\"value\"`.\n  - Use `$ID` (e.g., `$1`, `$2`) to refer to outputs from previous actions.\n* Inputs for actions can either be:\n  - Constants (directly specified values), or\n  - Outputs from previous actions.\n* When using outputs from previous actions, you must refer to them using the format `$ID` where `ID` is the action number.\n* Always call join() as the last action in the plan. After calling join, explicitly write: \"<END_OF_PLAN>\"\n* Maximize parallelizability:\n  - Design the plan so that actions that can be executed independently are arranged to run in parallel as much as possible.\n* Only use the provided action types.\n  - If the user query cannot be completely resolved with these, invoke the join() action and defer further steps.\n* Never add comments or explanations in the plan. \n  - For example, no `# explanation` allowed.\n* Never explain or annotate the plan — just output the plan itself.\n* **When to Use Outputs from Previous Actions**:\n  - You MUST use the output from a previous action as input if:\n    + The next action depends on the result of the previous action to proceed.\n    + The user query has sequential dependencies (e.g., first find something, then calculate something based on it).\n    + The input value cannot be predetermined and must be dynamically decided based on earlier results.\n  - In this case, refer to the prior action’s output using `$ID`, where `ID` is the action number.\n  - Examples where previous outputs are required:\n    + “Find the rating of the most popular movie” → rating depends on movie title → use `$1` to refer to the title.\n  - Examples where previous outputs are NOT required:\n    + The input is a constant already specified in the query (e.g., “Get today’s weather in Seoul” — 'Seoul' is constant).\n    + The tasks are completely independent (e.g., fetch weather and fetch exchange rate at the same time).\n</Guidelines>\n<Example>\n- User query: \"Find the title and rating of the most popular movie these days, add 10 points to the rating, and email both the movie title and the updated rating to sample25@mail.com.\"\n- Plan: \"\"\"\n1. search(query=\"Title of the most popular movie these days\")\n2. search(query=\"Rating of the movie $1\")\n3. math(problem=\"$2 + 10\")\n4. send_email(input=\"Please email the movie title $1 and the updated rating $3 to sample25@mail.com.\")\n5. join()\n<END_OF_PLAN>\n\"\"\"\n</Example>\nNote: The example provided is for reference only. Follow the general guidelines for constructing your own plans.",
                            "input_variables": [
                                "num_tools",
                                "tool_descriptions"
                            ],
                            "template_format": "f-string"
                        }
                    }
                }
            },
            {
                "id": [
                    "langchain_core",
                    "prompts",
                    "chat",
                    "MessagesPlaceholder"
                ],
                "lc": 1,
                "type": "constructor",
                "kwargs": {
                    "variable_name": "messages"
                }
            },
            {
                "id": [
                    "langchain",
                    "prompts",
                    "chat",
                    "SystemMessagePromptTemplate"
                ],
                "lc": 1,
                "type": "constructor",
                "kwargs": {
                    "prompt": {
                        "id": [
                            "langchain",
                            "prompts",
                            "prompt",
                            "PromptTemplate"
                        ],
                        "lc": 1,
                        "type": "constructor",
                        "kwargs": {
                            "template": "Remember, ONLY respond with the task list in the correct format! E.g.:\n1. tool1_name(arg1_name=arg1_value, arg2_name=arg2_value, ...)\n2. tool2_name(arg1_name=arg1_value, arg2_name=arg2_value, ...)",
                            "input_variables": [],
                            "template_format": "f-string"
                        }
                    }
                }
            }
        ],
        "input_variables": [
            "num_tools",
            "tool_descriptions",
            "messages"
        ],
        "partial_variables": {}
    }
}